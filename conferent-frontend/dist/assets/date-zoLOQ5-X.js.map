{"version":3,"file":"date-zoLOQ5-X.js","sources":["../../src/utils/date.js"],"sourcesContent":["/**\r\n * 날짜 관련 유틸리티 함수\r\n */\r\n\r\n/**\r\n * 현재 날짜를 ISO 문자열로 반환\r\n * @returns {string} ISO 8601 형식의 현재 날짜\r\n */\r\nexport const getCurrentDate = () => {\r\n  return new Date().toISOString()\r\n}\r\n\r\n/**\r\n * 날짜를 한국 시간대로 포맷팅\r\n * @param {string|Date} date - 날짜\r\n * @param {string} format - 포맷 옵션 ('date', 'time', 'datetime', 'relative')\r\n * @returns {string} 포맷된 날짜 문자열\r\n */\r\nexport const formatDate = (date, format = 'datetime') => {\r\n  const dateObj = typeof date === 'string' ? new Date(date) : date\r\n  \r\n  if (format === 'date') {\r\n    return dateObj.toLocaleDateString('ko-KR', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    })\r\n  }\r\n  \r\n  if (format === 'time') {\r\n    return dateObj.toLocaleTimeString('ko-KR', {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  }\r\n  \r\n  if (format === 'datetime') {\r\n    return dateObj.toLocaleString('ko-KR', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  }\r\n  \r\n  if (format === 'relative') {\r\n    return getRelativeTime(dateObj)\r\n  }\r\n  \r\n  return dateObj.toLocaleString('ko-KR')\r\n}\r\n\r\n/**\r\n * 상대적 시간 표현 (예: \"3분 전\", \"1시간 전\")\r\n * @param {Date} date - 날짜\r\n * @returns {string} 상대적 시간 문자열\r\n */\r\nexport const getRelativeTime = (date) => {\r\n  const now = new Date()\r\n  const diffInSeconds = Math.floor((now - date) / 1000)\r\n  \r\n  if (diffInSeconds < 60) {\r\n    return '방금 전'\r\n  }\r\n  \r\n  const diffInMinutes = Math.floor(diffInSeconds / 60)\r\n  if (diffInMinutes < 60) {\r\n    return `${diffInMinutes}분 전`\r\n  }\r\n  \r\n  const diffInHours = Math.floor(diffInMinutes / 60)\r\n  if (diffInHours < 24) {\r\n    return `${diffInHours}시간 전`\r\n  }\r\n  \r\n  const diffInDays = Math.floor(diffInHours / 24)\r\n  if (diffInDays < 7) {\r\n    return `${diffInDays}일 전`\r\n  }\r\n  \r\n  const diffInWeeks = Math.floor(diffInDays / 7)\r\n  if (diffInWeeks < 4) {\r\n    return `${diffInWeeks}주 전`\r\n  }\r\n  \r\n  const diffInMonths = Math.floor(diffInDays / 30)\r\n  if (diffInMonths < 12) {\r\n    return `${diffInMonths}개월 전`\r\n  }\r\n  \r\n  const diffInYears = Math.floor(diffInDays / 365)\r\n  return `${diffInYears}년 전`\r\n}\r\n\r\n/**\r\n * 두 날짜 간의 차이를 계산\r\n * @param {string|Date} startDate - 시작 날짜\r\n * @param {string|Date} endDate - 종료 날짜\r\n * @param {string} unit - 단위 ('minutes', 'hours', 'days')\r\n * @returns {number} 차이값\r\n */\r\nexport const getDateDifference = (startDate, endDate, unit = 'minutes') => {\r\n  const start = typeof startDate === 'string' ? new Date(startDate) : startDate\r\n  const end = typeof endDate === 'string' ? new Date(endDate) : endDate\r\n  \r\n  const diffInMs = end - start\r\n  \r\n  switch (unit) {\r\n    case 'minutes':\r\n      return Math.floor(diffInMs / (1000 * 60))\r\n    case 'hours':\r\n      return Math.floor(diffInMs / (1000 * 60 * 60))\r\n    case 'days':\r\n      return Math.floor(diffInMs / (1000 * 60 * 60 * 24))\r\n    default:\r\n      return diffInMs\r\n  }\r\n}\r\n\r\n/**\r\n * 날짜가 유효한지 확인\r\n * @param {string|Date} date - 확인할 날짜\r\n * @returns {boolean} 유효성 여부\r\n */\r\nexport const isValidDate = (date) => {\r\n  const dateObj = typeof date === 'string' ? new Date(date) : date\r\n  return dateObj instanceof Date && !isNaN(dateObj)\r\n}\r\n\r\n/**\r\n * 날짜 범위 생성\r\n * @param {string|Date} startDate - 시작 날짜\r\n * @param {string|Date} endDate - 종료 날짜\r\n * @param {string} interval - 간격 ('hour', 'day', 'week', 'month')\r\n * @returns {Date[]} 날짜 배열\r\n */\r\nexport const generateDateRange = (startDate, endDate, interval = 'hour') => {\r\n  const start = typeof startDate === 'string' ? new Date(startDate) : startDate\r\n  const end = typeof endDate === 'string' ? new Date(endDate) : endDate\r\n  const dates = []\r\n  \r\n  let current = new Date(start)\r\n  \r\n  while (current <= end) {\r\n    dates.push(new Date(current))\r\n    \r\n    switch (interval) {\r\n      case 'hour':\r\n        current.setHours(current.getHours() + 1)\r\n        break\r\n      case 'day':\r\n        current.setDate(current.getDate() + 1)\r\n        break\r\n      case 'week':\r\n        current.setDate(current.getDate() + 7)\r\n        break\r\n      case 'month':\r\n        current.setMonth(current.getMonth() + 1)\r\n        break\r\n      default:\r\n        current.setHours(current.getHours() + 1)\r\n    }\r\n  }\r\n  \r\n  return dates\r\n}\r\n\r\n/**\r\n * 오늘 날짜인지 확인\r\n * @param {string|Date} date - 확인할 날짜\r\n * @returns {boolean} 오늘 날짜 여부\r\n */\r\nexport const isToday = (date) => {\r\n  const dateObj = typeof date === 'string' ? new Date(date) : date\r\n  const today = new Date()\r\n  \r\n  return dateObj.getDate() === today.getDate() &&\r\n         dateObj.getMonth() === today.getMonth() &&\r\n         dateObj.getFullYear() === today.getFullYear()\r\n}\r\n\r\n/**\r\n * 주말인지 확인\r\n * @param {string|Date} date - 확인할 날짜\r\n * @returns {boolean} 주말 여부\r\n */\r\nexport const isWeekend = (date) => {\r\n  const dateObj = typeof date === 'string' ? new Date(date) : date\r\n  const day = dateObj.getDay()\r\n  return day === 0 || day === 6 // 0: 일요일, 6: 토요일\r\n}\r\n\r\n/**\r\n * 시간 충돌 확인\r\n * @param {string|Date} start1 - 첫 번째 시작 시간\r\n * @param {string|Date} end1 - 첫 번째 종료 시간\r\n * @param {string|Date} start2 - 두 번째 시작 시간\r\n * @param {string|Date} end2 - 두 번째 종료 시간\r\n * @returns {boolean} 충돌 여부\r\n */\r\nexport const hasTimeConflict = (start1, end1, start2, end2) => {\r\n  const s1 = typeof start1 === 'string' ? new Date(start1) : start1\r\n  const e1 = typeof end1 === 'string' ? new Date(end1) : end1\r\n  const s2 = typeof start2 === 'string' ? new Date(start2) : start2\r\n  const e2 = typeof end2 === 'string' ? new Date(end2) : end2\r\n  \r\n  return s1 < e2 && s2 < e1\r\n} "],"names":["formatDate","date","format","dateObj","getRelativeTime","diffInSeconds","diffInMinutes","diffInHours","diffInDays","diffInWeeks","diffInMonths"],"mappings":"AAkBY,MAACA,EAAa,CAACC,EAAMC,EAAS,aAAe,CACvD,MAAMC,EAAU,OAAOF,GAAS,SAAW,IAAI,KAAKA,CAAI,EAAIA,EAE5D,OAAIC,IAAW,OACNC,EAAQ,mBAAmB,QAAS,CACzC,KAAM,UACN,MAAO,OACP,IAAK,SACX,CAAK,EAGCD,IAAW,OACNC,EAAQ,mBAAmB,QAAS,CACzC,KAAM,UACN,OAAQ,SACd,CAAK,EAGCD,IAAW,WACNC,EAAQ,eAAe,QAAS,CACrC,KAAM,UACN,MAAO,OACP,IAAK,UACL,KAAM,UACN,OAAQ,SACd,CAAK,EAGCD,IAAW,WACNE,EAAgBD,CAAO,EAGzBA,EAAQ,eAAe,OAAO,CACvC,EAOaC,EAAmBH,GAAS,CAEvC,MAAMI,EAAgB,KAAK,OADf,IAAI,KACwBJ,GAAQ,GAAI,EAEpD,GAAII,EAAgB,GAClB,MAAO,OAGT,MAAMC,EAAgB,KAAK,MAAMD,EAAgB,EAAE,EACnD,GAAIC,EAAgB,GAClB,MAAO,GAAGA,CAAa,MAGzB,MAAMC,EAAc,KAAK,MAAMD,EAAgB,EAAE,EACjD,GAAIC,EAAc,GAChB,MAAO,GAAGA,CAAW,OAGvB,MAAMC,EAAa,KAAK,MAAMD,EAAc,EAAE,EAC9C,GAAIC,EAAa,EACf,MAAO,GAAGA,CAAU,MAGtB,MAAMC,EAAc,KAAK,MAAMD,EAAa,CAAC,EAC7C,GAAIC,EAAc,EAChB,MAAO,GAAGA,CAAW,MAGvB,MAAMC,EAAe,KAAK,MAAMF,EAAa,EAAE,EAC/C,OAAIE,EAAe,GACV,GAAGA,CAAY,OAIjB,GADa,KAAK,MAAMF,EAAa,GAAG,CAC1B,KACvB"}